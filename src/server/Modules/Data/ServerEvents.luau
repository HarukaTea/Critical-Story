--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		AddPoints = table.freeze({
			SetCallback = noop
		}),
		BuyItem = table.freeze({
			SetCallback = noop
		}),
		CombatStart = table.freeze({
			SetCallback = noop
		}),
		CreateHint = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CreateFullScreenHint = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ClientTween = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ChangePlayerSetting = table.freeze({
			SetCallback = noop
		}),
		ChangePlayerClass = table.freeze({
			SetCallback = noop
		}),
		ChangeAttackTarget = table.freeze({
			SetCallback = noop
		}),
		PlayerTakeDMG = table.freeze({
			SetCallback = noop
		}),
		ChangePlayerLocation = table.freeze({
			SetCallback = noop
		}),
		EquipItem = table.freeze({
			SetCallback = noop
		}),
		EquipItemServer = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		EnterShopping = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ItemCD = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ForceReset = table.freeze({
			SetCallback = noop
		}),
		CameraScene = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ChestUnlocked = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		GiveDrop = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		MonsterTakeDMG = table.freeze({
			SetCallback = noop
		}),
		EnterNPCChat = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		NPCChatEnded = table.freeze({
			SetCallback = noop
		}),
		NewQuest = table.freeze({
			SetCallback = noop
		}),
		PlaySound = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlaySoundServer = table.freeze({
			SetCallback = noop
		}),
		PlayAnimation = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RejoinRequest = table.freeze({
			SetCallback = noop
		}),
		FireStoryEvents = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		UseItem = table.freeze({
			SetCallback = noop
		}),
		UpdatePinnedItem = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end
local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(30)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Target = buffer.readstring(incoming_buff, read(len_1), len_1)
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value.Points = buffer.readu16(incoming_buff, read(2))
			else
				value.Points = nil
			end
			if events[1] then
				task.spawn(events[1], player, value)
			end
		elseif id == 2 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.Amount = buffer.readu16(incoming_buff, read(2))
			if events[2] then
				task.spawn(events[2], player, value)
			end
		elseif id == 3 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Locator = incoming_inst[incoming_ipos]
				assert(value.Locator == nil or value.Locator:IsA("BasePart"))
			else
				value.Locator = nil
			end
			if events[3] then
				task.spawn(events[3], player, value)
			end
		elseif id == 7 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.SettingId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[7] then
				task.spawn(events[7], player, value)
			end
		elseif id == 8 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ClassId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[8] then
				task.spawn(events[8], player, value)
			end
		elseif id == 9 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Target = incoming_inst[incoming_ipos]
				assert(value.Target == nil or value.Target:IsA("Model"))
			else
				value.Target = nil
			end
			if events[9] then
				task.spawn(events[9], player, value)
			end
		elseif id == 10 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Projectile = incoming_inst[incoming_ipos]
			else
				value.Projectile = nil
			end
			if events[10] then
				task.spawn(events[10], player, value)
			end
		elseif id == 12 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemType = buffer.readstring(incoming_buff, read(len_1), len_1)
			local len_2 = buffer.readu16(incoming_buff, read(2))
			value.ItemSlot = buffer.readstring(incoming_buff, read(len_2), len_2)
			local len_3 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_3), len_3)
			if events[12] then
				task.spawn(events[12], player, value)
			end
		elseif id == 16 then
			local value
			value = {}
			if events[16] then
				task.spawn(events[16], player, value)
			end
		elseif id == 20 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Orb = incoming_inst[incoming_ipos]
				assert(value.Orb == nil or value.Orb:IsA("Model"))
			else
				value.Orb = nil
			end
			if events[20] then
				task.spawn(events[20], player, value)
			end
		elseif id == 22 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.NPC = incoming_inst[incoming_ipos]
				assert(value.NPC == nil or value.NPC:IsA("Model"))
			else
				value.NPC = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local len_1 = buffer.readu16(incoming_buff, read(2))
				value.Series = buffer.readstring(incoming_buff, read(len_1), len_1)
			else
				value.Series = nil
			end
			if events[22] then
				task.spawn(events[22], player, value)
			end
		elseif id == 23 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.NPC = incoming_inst[incoming_ipos]
				assert(value.NPC == nil or value.NPC:IsA("Model"))
			else
				value.NPC = nil
			end
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.Series = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.QuestId = buffer.readu8(incoming_buff, read(1))
			if events[23] then
				task.spawn(events[23], player, value)
			end
		elseif id == 25 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Sound = incoming_inst[incoming_ipos]
				assert(value.Sound == nil or value.Sound:IsA("Sound"))
			else
				value.Sound = nil
			end
			value.Origin = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[25] then
				task.spawn(events[25], player, value)
			end
		elseif id == 29 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[29] then
				task.spawn(events[29], player, value)
			end
		elseif id == 30 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[30] then
				task.spawn(events[30], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 11 then
		local value
		value = {}
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 100)
		value.LocationId = buffer.readstring(incoming_buff, read(len_1), len_1)
		if events[11] then
			task.spawn(events[11], player, value)
		end
	elseif id == 27 then
		local value
		value = {}
		if events[27] then
			task.spawn(events[27], player, value)
		end
	else
		error("Unknown event id")
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	CreateHint = table.freeze({
		Fire = function(Player: Player, Value: ({
			Hint: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			Hint: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			Hint: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Hint: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Hint: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	CreateFullScreenHint = table.freeze({
		Fire = function(Player: Player, Value: ({
			Hint: (string),
			State: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.State and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			Hint: (string),
			State: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.State and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			Hint: (string),
			State: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.State and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Hint: (string),
			State: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.State and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Hint: (string),
			State: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			local len_1 = #Value.Hint
			assert(len_1 <= 666)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Hint, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.State and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	}),
	ClientTween = table.freeze({
		Fire = function(Player: Player, Value: ({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if Value.Objs == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Objs
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				for i_1 = 1, len_1 do
					local val_1 = Value.Objs[i_1]
					table.insert(outgoing_inst, val_1)
				end
			end
			if Value.Goal == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Goal)
			end
			local len_2 = #Value.TweenInfo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.TweenInfo, len_2)
			if Value.UseHarukaTween == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.UseHarukaTween and 1 or 0)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if Value.Objs == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Objs
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				for i_1 = 1, len_1 do
					local val_1 = Value.Objs[i_1]
					table.insert(outgoing_inst, val_1)
				end
			end
			if Value.Goal == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Goal)
			end
			local len_2 = #Value.TweenInfo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.TweenInfo, len_2)
			if Value.UseHarukaTween == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.UseHarukaTween and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if Value.Objs == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Objs
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				for i_1 = 1, len_1 do
					local val_1 = Value.Objs[i_1]
					table.insert(outgoing_inst, val_1)
				end
			end
			if Value.Goal == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Goal)
			end
			local len_2 = #Value.TweenInfo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.TweenInfo, len_2)
			if Value.UseHarukaTween == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.UseHarukaTween and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if Value.Objs == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Objs
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				for i_1 = 1, len_1 do
					local val_1 = Value.Objs[i_1]
					table.insert(outgoing_inst, val_1)
				end
			end
			if Value.Goal == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Goal)
			end
			local len_2 = #Value.TweenInfo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.TweenInfo, len_2)
			if Value.UseHarukaTween == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.UseHarukaTween and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			if Value.Objs == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Objs
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				for i_1 = 1, len_1 do
					local val_1 = Value.Objs[i_1]
					table.insert(outgoing_inst, val_1)
				end
			end
			if Value.Goal == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Goal)
			end
			local len_2 = #Value.TweenInfo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.TweenInfo, len_2)
			if Value.UseHarukaTween == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, Value.UseHarukaTween and 1 or 0)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	EquipItemServer = table.freeze({
		Fire = function(Player: Player, Value: ({
			ItemSlot: (string),
			ItemId: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			local len_1 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_1)
			local len_2 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_2)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			ItemSlot: (string),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			local len_1 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_1)
			local len_2 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_2)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			ItemSlot: (string),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			local len_1 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_1)
			local len_2 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_2)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			ItemSlot: (string),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			local len_1 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_1)
			local len_2 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_2)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			ItemSlot: (string),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 13)
			local len_1 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_1)
			local len_2 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_2)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	EnterShopping = table.freeze({
		Fire = function(Player: Player, Value: ({
			Items: ({ (string) }),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local len_1 = #Value.Items
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.Items[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Items: ({ (string) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local len_1 = #Value.Items
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.Items[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Items: ({ (string) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local len_1 = #Value.Items
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.Items[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Items: ({ (string) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local len_1 = #Value.Items
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.Items[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Items: ({ (string) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			local len_1 = #Value.Items
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.Items[i_1]
				local len_2 = #val_1
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
				alloc(len_2)
				buffer.writestring(outgoing_buff, outgoing_apos, val_1, len_2)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	ItemCD = table.freeze({
		Fire = function(Player: Player, Value: ({
			Cooldown: (number),
			ItemId: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Cooldown)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Cooldown: (number),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Cooldown)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Cooldown: (number),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Cooldown)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Cooldown: (number),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Cooldown)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Cooldown: (number),
			ItemId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 15)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Cooldown)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	CameraScene = table.freeze({
		Fire = function(Player: Player, Value: ({
			Part: ((BasePart)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			if Value.Part == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Part:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Part)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Part: ((BasePart)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			if Value.Part == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Part:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Part)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Part: ((BasePart)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			if Value.Part == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Part:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Part)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Part: ((BasePart)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			if Value.Part == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Part:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Part)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Part: ((BasePart)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 17)
			if Value.Part == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Part:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Part)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	ChestUnlocked = table.freeze({
		Fire = function(Player: Player, Value: ({
			Chest: ((Model)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Chest == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Chest:IsA("Model"))
				table.insert(outgoing_inst, Value.Chest)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Chest: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Chest == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Chest:IsA("Model"))
				table.insert(outgoing_inst, Value.Chest)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Chest: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Chest == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Chest:IsA("Model"))
				table.insert(outgoing_inst, Value.Chest)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Chest: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Chest == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Chest:IsA("Model"))
				table.insert(outgoing_inst, Value.Chest)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Chest: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Chest == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Chest:IsA("Model"))
				table.insert(outgoing_inst, Value.Chest)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	GiveDrop = table.freeze({
		Fire = function(Player: Player, Value: ({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.IsNew and 1 or 0)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.IsNew and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.IsNew and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.IsNew and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 19)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.IsNew and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	EnterNPCChat = table.freeze({
		Fire = function(Player: Player, Value: ({
			NPC: ((Model)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			NPC: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			NPC: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			NPC: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			NPC: ((Model)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	PlaySound = table.freeze({
		Fire = function(Player: Player, Value: ({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			if Value.TimePos == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.TimePos)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			if Value.TimePos == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.TimePos)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			if Value.TimePos == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.TimePos)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			if Value.TimePos == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.TimePos)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			if Value.TimePos == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.TimePos)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	PlayAnimation = table.freeze({
		Fire = function(Player: Player, Value: ({
			AnimId: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			local len_1 = #Value.AnimId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.AnimId, len_1)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			AnimId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			local len_1 = #Value.AnimId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.AnimId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			AnimId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			local len_1 = #Value.AnimId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.AnimId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			AnimId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			local len_1 = #Value.AnimId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.AnimId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			AnimId: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			local len_1 = #Value.AnimId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.AnimId, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	FireStoryEvents = table.freeze({
		Fire = function(Player: Player, Value: ({
			EventSymbol: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.EventSymbol
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.EventSymbol, len_1)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			EventSymbol: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.EventSymbol
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.EventSymbol, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			EventSymbol: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.EventSymbol
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.EventSymbol, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			EventSymbol: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.EventSymbol
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.EventSymbol, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			EventSymbol: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.EventSymbol
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.EventSymbol, len_1)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	}),
	AddPoints = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Target: (string),
			Points: ((number)?),
		})) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	}),
	BuyItem = table.freeze({
		SetCallback = function(Callback: (Player, ({
			ItemId: (string),
			Amount: (number),
		})) -> ()): () -> ()
			events[2] = Callback
			return function()
				events[2] = nil
			end
		end,
	}),
	CombatStart = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Locator: ((BasePart)?),
		})) -> ()): () -> ()
			events[3] = Callback
			return function()
				events[3] = nil
			end
		end,
	}),
	ChangePlayerSetting = table.freeze({
		SetCallback = function(Callback: (Player, ({
			SettingId: (string),
		})) -> ()): () -> ()
			events[7] = Callback
			return function()
				events[7] = nil
			end
		end,
	}),
	ChangePlayerClass = table.freeze({
		SetCallback = function(Callback: (Player, ({
			ClassId: (string),
		})) -> ()): () -> ()
			events[8] = Callback
			return function()
				events[8] = nil
			end
		end,
	}),
	ChangeAttackTarget = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Target: ((Model)?),
		})) -> ()): () -> ()
			events[9] = Callback
			return function()
				events[9] = nil
			end
		end,
	}),
	PlayerTakeDMG = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Projectile: ((Instance)?),
		})) -> ()): () -> ()
			events[10] = Callback
			return function()
				events[10] = nil
			end
		end,
	}),
	ChangePlayerLocation = table.freeze({
		SetCallback = function(Callback: (Player, ({
			LocationId: (string),
		})) -> ()): () -> ()
			events[11] = Callback
			return function()
				events[11] = nil
			end
		end,
	}),
	EquipItem = table.freeze({
		SetCallback = function(Callback: (Player, ({
			ItemType: (string),
			ItemSlot: (string),
			ItemId: (string),
		})) -> ()): () -> ()
			events[12] = Callback
			return function()
				events[12] = nil
			end
		end,
	}),
	ForceReset = table.freeze({
		SetCallback = function(Callback: (Player, ({
		})) -> ()): () -> ()
			events[16] = Callback
			return function()
				events[16] = nil
			end
		end,
	}),
	MonsterTakeDMG = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Orb: ((Model)?),
		})) -> ()): () -> ()
			events[20] = Callback
			return function()
				events[20] = nil
			end
		end,
	}),
	NPCChatEnded = table.freeze({
		SetCallback = function(Callback: (Player, ({
			NPC: ((Model)?),
			Series: ((string)?),
		})) -> ()): () -> ()
			events[22] = Callback
			return function()
				events[22] = nil
			end
		end,
	}),
	NewQuest = table.freeze({
		SetCallback = function(Callback: (Player, ({
			NPC: ((Model)?),
			Series: (string),
			QuestId: (number),
		})) -> ()): () -> ()
			events[23] = Callback
			return function()
				events[23] = nil
			end
		end,
	}),
	PlaySoundServer = table.freeze({
		SetCallback = function(Callback: (Player, ({
			Sound: ((Sound)?),
			Origin: (Vector3),
		})) -> ()): () -> ()
			events[25] = Callback
			return function()
				events[25] = nil
			end
		end,
	}),
	RejoinRequest = table.freeze({
		SetCallback = function(Callback: (Player, ({
		})) -> ()): () -> ()
			events[27] = Callback
			return function()
				events[27] = nil
			end
		end,
	}),
	UseItem = table.freeze({
		SetCallback = function(Callback: (Player, ({
			ItemId: (string),
		})) -> ()): () -> ()
			events[29] = Callback
			return function()
				events[29] = nil
			end
		end,
	}),
	UpdatePinnedItem = table.freeze({
		SetCallback = function(Callback: (Player, ({
			ItemId: (string),
		})) -> ()): () -> ()
			events[30] = Callback
			return function()
				events[30] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
