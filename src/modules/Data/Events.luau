--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.8 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		AddPoints = table.freeze({
			Fire = noop
		}),
		BuyItem = table.freeze({
			Fire = noop
		}),
		CombatStart = table.freeze({
			Fire = noop
		}),
		CreateHint = table.freeze({
			On = noop
		}),
		ClientTween = table.freeze({
			SetCallback = noop
		}),
		ChangePlayerSetting = table.freeze({
			Fire = noop
		}),
		ChangeAttackTarget = table.freeze({
			Fire = noop
		}),
		PlayerTakeDMG = table.freeze({
			Fire = noop
		}),
		ChangePlayerLocation = table.freeze({
			Fire = noop
		}),
		EquipItem = table.freeze({
			Fire = noop
		}),
		EquipItemServer = table.freeze({
			On = noop
		}),
		EnterShopping = table.freeze({
			On = noop
		}),
		ItemCD = table.freeze({
			On = noop
		}),
		ForceReset = table.freeze({
			Fire = noop
		}),
		CameraScene = table.freeze({
			SetCallback = noop
		}),
		ChestUnlocked = table.freeze({
			SetCallback = noop
		}),
		GiveDrop = table.freeze({
			On = noop
		}),
		MonsterTakeDMG = table.freeze({
			Fire = noop
		}),
		EnterNPCChat = table.freeze({
			On = noop
		}),
		NPCChatEnded = table.freeze({
			Fire = noop
		}),
		NewQuest = table.freeze({
			Fire = noop
		}),
		PlaySound = table.freeze({
			SetCallback = noop
		}),
		PlaySoundServer = table.freeze({
			Fire = noop
		}),
		PlayAnimation = table.freeze({
			On = noop
		}),
		RejoinRequest = table.freeze({
			Fire = noop
		}),
		FireStoryEvents = table.freeze({
			SetCallback = noop
		}),
		UseItem = table.freeze({
			Fire = noop
		}),
		UpdatePinnedItem = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local reliable = ReplicatedStorage:WaitForChild("ZAP_RELIABLE")
local unreliable = ReplicatedStorage:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(28)
local event_queue: { [number]: { any } } = table.create(28)
events[4] = {}
event_queue[4] = {}
event_queue[5] = {}
events[11] = {}
event_queue[11] = {}
events[12] = {}
event_queue[12] = {}
events[13] = {}
event_queue[13] = {}
event_queue[15] = {}
event_queue[16] = {}
events[17] = {}
event_queue[17] = {}
events[19] = {}
event_queue[19] = {}
event_queue[22] = {}
events[24] = {}
event_queue[24] = {}
event_queue[26] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 5 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value.Objs = {}
				local len_1 = buffer.readu16(incoming_buff, read(2))
				for i_1 = 1, len_1 do
					local val_1
					incoming_ipos = incoming_ipos + 1
					val_1 = incoming_inst[incoming_ipos]
					assert(val_1 ~= nil)
					value.Objs[i_1] = val_1
				end
			else
				value.Objs = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Goal = incoming_inst[incoming_ipos]
			else
				value.Goal = nil
			end
			local len_2 = buffer.readu16(incoming_buff, read(2))
			value.TweenInfo = buffer.readstring(incoming_buff, read(len_2), len_2)
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value.UseHarukaTween = buffer.readu8(incoming_buff, read(1)) == 1
			else
				value.UseHarukaTween = nil
			end
			if events[5] then
				task.spawn(events[5], value)
			else
				table.insert(event_queue[5], value)
				if #event_queue[5] > 64 then
					warn(`[ZAP] {#event_queue[5]} events in queue for ClientTween. Did you forget to attach a listener?`)
				end
			end
		elseif id == 11 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemSlot = buffer.readstring(incoming_buff, read(len_1), len_1)
			local len_2 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_2), len_2)
			if events[11][1] then
				for _, cb in events[11] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[11], value)
				if #event_queue[11] > 64 then
					warn(`[ZAP] {#event_queue[11]} events in queue for EquipItemServer. Did you forget to attach a listener?`)
				end
			end
		elseif id == 12 then
			local value
			value = {}
			value.Items = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			for i_1 = 1, len_1 do
				local val_1
				local len_2 = buffer.readu16(incoming_buff, read(2))
				val_1 = buffer.readstring(incoming_buff, read(len_2), len_2)
				value.Items[i_1] = val_1
			end
			if events[12][1] then
				for _, cb in events[12] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[12], value)
				if #event_queue[12] > 64 then
					warn(`[ZAP] {#event_queue[12]} events in queue for EnterShopping. Did you forget to attach a listener?`)
				end
			end
		elseif id == 13 then
			local value
			value = {}
			value.Cooldown = buffer.readu8(incoming_buff, read(1))
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[13][1] then
				for _, cb in events[13] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[13], value)
				if #event_queue[13] > 64 then
					warn(`[ZAP] {#event_queue[13]} events in queue for ItemCD. Did you forget to attach a listener?`)
				end
			end
		elseif id == 15 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Part = incoming_inst[incoming_ipos]
				assert(value.Part == nil or value.Part:IsA("BasePart"))
			else
				value.Part = nil
			end
			if events[15] then
				task.spawn(events[15], value)
			else
				table.insert(event_queue[15], value)
				if #event_queue[15] > 64 then
					warn(`[ZAP] {#event_queue[15]} events in queue for CameraScene. Did you forget to attach a listener?`)
				end
			end
		elseif id == 16 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Chest = incoming_inst[incoming_ipos]
				assert(value.Chest == nil or value.Chest:IsA("Model"))
			else
				value.Chest = nil
			end
			if events[16] then
				task.spawn(events[16], value)
			else
				table.insert(event_queue[16], value)
				if #event_queue[16] > 64 then
					warn(`[ZAP] {#event_queue[16]} events in queue for ChestUnlocked. Did you forget to attach a listener?`)
				end
			end
		elseif id == 17 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.ItemId = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.Amount = buffer.readu16(incoming_buff, read(2))
			value.IsNew = buffer.readu8(incoming_buff, read(1)) == 1
			if events[17][1] then
				for _, cb in events[17] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[17], value)
				if #event_queue[17] > 64 then
					warn(`[ZAP] {#event_queue[17]} events in queue for GiveDrop. Did you forget to attach a listener?`)
				end
			end
		elseif id == 19 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.NPC = incoming_inst[incoming_ipos]
				assert(value.NPC == nil or value.NPC:IsA("Model"))
			else
				value.NPC = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Prompt = incoming_inst[incoming_ipos]
				assert(value.Prompt == nil or value.Prompt:IsA("ProximityPrompt"))
			else
				value.Prompt = nil
			end
			if events[19][1] then
				for _, cb in events[19] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[19], value)
				if #event_queue[19] > 64 then
					warn(`[ZAP] {#event_queue[19]} events in queue for EnterNPCChat. Did you forget to attach a listener?`)
				end
			end
		elseif id == 22 then
			local value
			value = {}
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.Sound = incoming_inst[incoming_ipos]
				assert(value.Sound == nil or value.Sound:IsA("Sound"))
			else
				value.Sound = nil
			end
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				value.TimePos = buffer.readu16(incoming_buff, read(2))
			else
				value.TimePos = nil
			end
			if events[22] then
				task.spawn(events[22], value)
			else
				table.insert(event_queue[22], value)
				if #event_queue[22] > 64 then
					warn(`[ZAP] {#event_queue[22]} events in queue for PlaySound. Did you forget to attach a listener?`)
				end
			end
		elseif id == 24 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.AnimId = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[24][1] then
				for _, cb in events[24] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[24], value)
				if #event_queue[24] > 64 then
					warn(`[ZAP] {#event_queue[24]} events in queue for PlayAnimation. Did you forget to attach a listener?`)
				end
			end
		elseif id == 26 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.EventSymbol = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[26] then
				task.spawn(events[26], value)
			else
				table.insert(event_queue[26], value)
				if #event_queue[26] > 64 then
					warn(`[ZAP] {#event_queue[26]} events in queue for FireStoryEvents. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 4 then
		local value
		value = {}
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 <= 666)
		value.Hint = buffer.readstring(incoming_buff, read(len_1), len_1)
		if buffer.readu8(incoming_buff, read(1)) == 1 then
			local len_2 = buffer.readu16(incoming_buff, read(2))
			assert(len_2 <= 10)
			value.Option = buffer.readstring(incoming_buff, read(len_2), len_2)
		else
			value.Option = nil
		end
		if events[4][1] then
			for _, cb in events[4] do
				task.spawn(cb, value)
			end
		else
			table.insert(event_queue[4], value)
			if #event_queue[4] > 64 then
				warn(`[ZAP] {#event_queue[4]} events in queue for CreateHint. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
local returns = table.freeze({
	SendEvents = SendEvents,
	AddPoints = table.freeze({
		Fire = function(Value: ({
			Target: (string),
			Points: ((number)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local len_1 = #Value.Target
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Target, len_1)
			if Value.Points == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, Value.Points)
			end
		end,
	}),
	BuyItem = table.freeze({
		Fire = function(Value: ({
			ItemId: (string),
			Amount: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.Amount)
		end,
	}),
	CombatStart = table.freeze({
		Fire = function(Value: ({
			Locator: ((BasePart)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			if Value.Locator == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Locator:IsA("BasePart"))
				table.insert(outgoing_inst, Value.Locator)
			end
		end,
	}),
	ChangePlayerSetting = table.freeze({
		Fire = function(Value: ({
			SettingId: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
			local len_1 = #Value.SettingId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.SettingId, len_1)
		end,
	}),
	ChangeAttackTarget = table.freeze({
		Fire = function(Value: ({
			Target: ((Model)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			if Value.Target == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Target:IsA("Model"))
				table.insert(outgoing_inst, Value.Target)
			end
		end,
	}),
	PlayerTakeDMG = table.freeze({
		Fire = function(Value: ({
			Projectile: ((Instance)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 8)
			if Value.Projectile == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				table.insert(outgoing_inst, Value.Projectile)
			end
		end,
	}),
	ChangePlayerLocation = table.freeze({
		Fire = function(Value: ({
			LocationId: (string),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			local len_1 = #Value.LocationId
			assert(len_1 <= 100)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.LocationId, len_1)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	}),
	EquipItem = table.freeze({
		Fire = function(Value: ({
			ItemType: (string),
			ItemSlot: (string),
			ItemId: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 10)
			local len_1 = #Value.ItemType
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemType, len_1)
			local len_2 = #Value.ItemSlot
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemSlot, len_2)
			local len_3 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
			alloc(len_3)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_3)
		end,
	}),
	ForceReset = table.freeze({
		Fire = function(Value: ({
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
		end,
	}),
	MonsterTakeDMG = table.freeze({
		Fire = function(Value: ({
			Orb: ((Model)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			if Value.Orb == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Orb:IsA("Model"))
				table.insert(outgoing_inst, Value.Orb)
			end
		end,
	}),
	NPCChatEnded = table.freeze({
		Fire = function(Value: ({
			NPC: ((Model)?),
			Series: ((string)?),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			if Value.Series == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local len_1 = #Value.Series
				alloc(2)
				buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
				alloc(len_1)
				buffer.writestring(outgoing_buff, outgoing_apos, Value.Series, len_1)
			end
		end,
	}),
	NewQuest = table.freeze({
		Fire = function(Value: ({
			NPC: ((Model)?),
			Series: (string),
			QuestId: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 21)
			if Value.NPC == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.NPC:IsA("Model"))
				table.insert(outgoing_inst, Value.NPC)
			end
			local len_1 = #Value.Series
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.Series, len_1)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.QuestId)
		end,
	}),
	PlaySoundServer = table.freeze({
		Fire = function(Value: ({
			Sound: ((Sound)?),
			Origin: (Vector3),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 23)
			if Value.Sound == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				assert(Value.Sound:IsA("Sound"))
				table.insert(outgoing_inst, Value.Sound)
			end
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.Origin.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.Origin.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.Origin.Z)
		end,
	}),
	RejoinRequest = table.freeze({
		Fire = function(Value: ({
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 25)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	}),
	UseItem = table.freeze({
		Fire = function(Value: ({
			ItemId: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 27)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
		end,
	}),
	UpdatePinnedItem = table.freeze({
		Fire = function(Value: ({
			ItemId: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			local len_1 = #Value.ItemId
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.ItemId, len_1)
		end,
	}),
	CreateHint = table.freeze({
		On = function(Callback: (({
			Hint: (string),
			Option: ((string)?),
		})) -> ())
			table.insert(events[4], Callback)
			for _, value in event_queue[4] do
				task.spawn(Callback, value)
			end
			event_queue[4] = {}
			return function()
				table.remove(events[4], table.find(events[4], Callback))
			end
		end,
	}),
	ClientTween = table.freeze({
		SetCallback = function(Callback: (({
			Objs: (({ (Instance) })?),
			Goal: ((unknown)),
			TweenInfo: (string),
			UseHarukaTween: ((boolean)?),
		})) -> ()): () -> ()
			events[5] = Callback
			for _, value in event_queue[5] do
				task.spawn(Callback, value)
			end
			event_queue[5] = {}
			return function()
				events[5] = nil
			end
		end,
	}),
	EquipItemServer = table.freeze({
		On = function(Callback: (({
			ItemSlot: (string),
			ItemId: (string),
		})) -> ())
			table.insert(events[11], Callback)
			for _, value in event_queue[11] do
				task.spawn(Callback, value)
			end
			event_queue[11] = {}
			return function()
				table.remove(events[11], table.find(events[11], Callback))
			end
		end,
	}),
	EnterShopping = table.freeze({
		On = function(Callback: (({
			Items: ({ (string) }),
		})) -> ())
			table.insert(events[12], Callback)
			for _, value in event_queue[12] do
				task.spawn(Callback, value)
			end
			event_queue[12] = {}
			return function()
				table.remove(events[12], table.find(events[12], Callback))
			end
		end,
	}),
	ItemCD = table.freeze({
		On = function(Callback: (({
			Cooldown: (number),
			ItemId: (string),
		})) -> ())
			table.insert(events[13], Callback)
			for _, value in event_queue[13] do
				task.spawn(Callback, value)
			end
			event_queue[13] = {}
			return function()
				table.remove(events[13], table.find(events[13], Callback))
			end
		end,
	}),
	CameraScene = table.freeze({
		SetCallback = function(Callback: (({
			Part: ((BasePart)?),
		})) -> ()): () -> ()
			events[15] = Callback
			for _, value in event_queue[15] do
				task.spawn(Callback, value)
			end
			event_queue[15] = {}
			return function()
				events[15] = nil
			end
		end,
	}),
	ChestUnlocked = table.freeze({
		SetCallback = function(Callback: (({
			Chest: ((Model)?),
		})) -> ()): () -> ()
			events[16] = Callback
			for _, value in event_queue[16] do
				task.spawn(Callback, value)
			end
			event_queue[16] = {}
			return function()
				events[16] = nil
			end
		end,
	}),
	GiveDrop = table.freeze({
		On = function(Callback: (({
			ItemId: (string),
			Amount: (number),
			IsNew: (boolean),
		})) -> ())
			table.insert(events[17], Callback)
			for _, value in event_queue[17] do
				task.spawn(Callback, value)
			end
			event_queue[17] = {}
			return function()
				table.remove(events[17], table.find(events[17], Callback))
			end
		end,
	}),
	EnterNPCChat = table.freeze({
		On = function(Callback: (({
			NPC: ((Model)?),
			Prompt: ((ProximityPrompt)?),
		})) -> ())
			table.insert(events[19], Callback)
			for _, value in event_queue[19] do
				task.spawn(Callback, value)
			end
			event_queue[19] = {}
			return function()
				table.remove(events[19], table.find(events[19], Callback))
			end
		end,
	}),
	PlaySound = table.freeze({
		SetCallback = function(Callback: (({
			Sound: ((Sound)?),
			TimePos: ((number)?),
		})) -> ()): () -> ()
			events[22] = Callback
			for _, value in event_queue[22] do
				task.spawn(Callback, value)
			end
			event_queue[22] = {}
			return function()
				events[22] = nil
			end
		end,
	}),
	PlayAnimation = table.freeze({
		On = function(Callback: (({
			AnimId: (string),
		})) -> ())
			table.insert(events[24], Callback)
			for _, value in event_queue[24] do
				task.spawn(Callback, value)
			end
			event_queue[24] = {}
			return function()
				table.remove(events[24], table.find(events[24], Callback))
			end
		end,
	}),
	FireStoryEvents = table.freeze({
		SetCallback = function(Callback: (({
			EventSymbol: (string),
		})) -> ()): () -> ()
			events[26] = Callback
			for _, value in event_queue[26] do
				task.spawn(Callback, value)
			end
			event_queue[26] = {}
			return function()
				events[26] = nil
			end
		end,
	}),
})
type Events = typeof(returns)
return returns
